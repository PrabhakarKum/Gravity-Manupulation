//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Actions/Player Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Control"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""add95f69-1c34-402a-927a-d9cdcf3584c6"",
            ""actions"": [
                {
                    ""name"": ""MovementControls"",
                    ""type"": ""Value"",
                    ""id"": ""f5736592-01f1-46bc-9396-09a041339afc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""e46842a7-978a-4c1a-8167-f0315f3d7f43"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""16a30d99-8b80-4287-bbb1-78b7d6ecfc16"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementControls"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""87b097a5-ac05-4c40-81df-a7bf849627fa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a687cb0-1301-4c8a-aa1a-a5bd36925d7b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""71126313-1fb5-4834-bce3-2d29b8920b65"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""15e6be51-23b6-43b5-a3d2-757c2ea83501"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""06958fd3-e93a-418b-92fd-bd1c8a492de1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Camera"",
            ""id"": ""1251efdd-a3bd-4bfb-ba5d-e0dab527200b"",
            ""actions"": [
                {
                    ""name"": ""Camera Controls"",
                    ""type"": ""PassThrough"",
                    ""id"": ""92faef3c-c93f-48df-b2a3-bb03b611607a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e047cbfa-7b52-429b-8523-aad9950f5b7b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Controls"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e4dde6f-155e-424e-9b2d-e31cf260191b"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Controls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4762d4b6-f83e-4b9d-bde2-bfde3e5e3937"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Controls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bb11a137-1ecb-45a5-841b-6cf9939456d2"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Controls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c1665bb-3b1a-4dd7-9ea8-820765ca97e2"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Controls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player Rotate"",
            ""id"": ""2404550a-53ad-4a3b-8f29-551e2f603abf"",
            ""actions"": [
                {
                    ""name"": ""Select Direction"",
                    ""type"": ""Value"",
                    ""id"": ""a21ea3a7-52f5-4f01-8791-0434d1c6ae37"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Confirm Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""ce012c21-4b02-4e0d-9150-db4a992358d6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Disable Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""aafd71cd-5164-4bcf-a278-fb6d4b8d7793"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2292e89-67c2-45e1-8ceb-c03e5eb670a7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c20835d-7ac6-4b89-9bae-8241a4767f61"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""871cee9a-25e7-486d-8c12-9dca10069b20"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d8a6359-7e19-40c6-a1ad-d7c60ec30720"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec27ca70-d533-4650-b683-81a53f23cbef"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24719cec-a82a-4706-883d-37f536ae8454"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Disable Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_MovementControls = m_PlayerMovement.FindAction("MovementControls", throwIfNotFound: true);
        m_PlayerMovement_Jumping = m_PlayerMovement.FindAction("Jumping", throwIfNotFound: true);
        // Player Camera
        m_PlayerCamera = asset.FindActionMap("Player Camera", throwIfNotFound: true);
        m_PlayerCamera_CameraControls = m_PlayerCamera.FindAction("Camera Controls", throwIfNotFound: true);
        // Player Rotate
        m_PlayerRotate = asset.FindActionMap("Player Rotate", throwIfNotFound: true);
        m_PlayerRotate_SelectDirection = m_PlayerRotate.FindAction("Select Direction", throwIfNotFound: true);
        m_PlayerRotate_ConfirmRotate = m_PlayerRotate.FindAction("Confirm Rotate", throwIfNotFound: true);
        m_PlayerRotate_DisableRotate = m_PlayerRotate.FindAction("Disable Rotate", throwIfNotFound: true);
    }

    ~@PlayerControl()
    {
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, PlayerControl.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerCamera.enabled, "This will cause a leak and performance issues, PlayerControl.PlayerCamera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerRotate.enabled, "This will cause a leak and performance issues, PlayerControl.PlayerRotate.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_MovementControls;
    private readonly InputAction m_PlayerMovement_Jumping;
    public struct PlayerMovementActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerMovementActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementControls => m_Wrapper.m_PlayerMovement_MovementControls;
        public InputAction @Jumping => m_Wrapper.m_PlayerMovement_Jumping;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @MovementControls.started += instance.OnMovementControls;
            @MovementControls.performed += instance.OnMovementControls;
            @MovementControls.canceled += instance.OnMovementControls;
            @Jumping.started += instance.OnJumping;
            @Jumping.performed += instance.OnJumping;
            @Jumping.canceled += instance.OnJumping;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @MovementControls.started -= instance.OnMovementControls;
            @MovementControls.performed -= instance.OnMovementControls;
            @MovementControls.canceled -= instance.OnMovementControls;
            @Jumping.started -= instance.OnJumping;
            @Jumping.performed -= instance.OnJumping;
            @Jumping.canceled -= instance.OnJumping;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Camera
    private readonly InputActionMap m_PlayerCamera;
    private List<IPlayerCameraActions> m_PlayerCameraActionsCallbackInterfaces = new List<IPlayerCameraActions>();
    private readonly InputAction m_PlayerCamera_CameraControls;
    public struct PlayerCameraActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerCameraActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraControls => m_Wrapper.m_PlayerCamera_CameraControls;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Add(instance);
            @CameraControls.started += instance.OnCameraControls;
            @CameraControls.performed += instance.OnCameraControls;
            @CameraControls.canceled += instance.OnCameraControls;
        }

        private void UnregisterCallbacks(IPlayerCameraActions instance)
        {
            @CameraControls.started -= instance.OnCameraControls;
            @CameraControls.performed -= instance.OnCameraControls;
            @CameraControls.canceled -= instance.OnCameraControls;
        }

        public void RemoveCallbacks(IPlayerCameraActions instance)
        {
            if (m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);

    // Player Rotate
    private readonly InputActionMap m_PlayerRotate;
    private List<IPlayerRotateActions> m_PlayerRotateActionsCallbackInterfaces = new List<IPlayerRotateActions>();
    private readonly InputAction m_PlayerRotate_SelectDirection;
    private readonly InputAction m_PlayerRotate_ConfirmRotate;
    private readonly InputAction m_PlayerRotate_DisableRotate;
    public struct PlayerRotateActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerRotateActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectDirection => m_Wrapper.m_PlayerRotate_SelectDirection;
        public InputAction @ConfirmRotate => m_Wrapper.m_PlayerRotate_ConfirmRotate;
        public InputAction @DisableRotate => m_Wrapper.m_PlayerRotate_DisableRotate;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRotateActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerRotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerRotateActionsCallbackInterfaces.Add(instance);
            @SelectDirection.started += instance.OnSelectDirection;
            @SelectDirection.performed += instance.OnSelectDirection;
            @SelectDirection.canceled += instance.OnSelectDirection;
            @ConfirmRotate.started += instance.OnConfirmRotate;
            @ConfirmRotate.performed += instance.OnConfirmRotate;
            @ConfirmRotate.canceled += instance.OnConfirmRotate;
            @DisableRotate.started += instance.OnDisableRotate;
            @DisableRotate.performed += instance.OnDisableRotate;
            @DisableRotate.canceled += instance.OnDisableRotate;
        }

        private void UnregisterCallbacks(IPlayerRotateActions instance)
        {
            @SelectDirection.started -= instance.OnSelectDirection;
            @SelectDirection.performed -= instance.OnSelectDirection;
            @SelectDirection.canceled -= instance.OnSelectDirection;
            @ConfirmRotate.started -= instance.OnConfirmRotate;
            @ConfirmRotate.performed -= instance.OnConfirmRotate;
            @ConfirmRotate.canceled -= instance.OnConfirmRotate;
            @DisableRotate.started -= instance.OnDisableRotate;
            @DisableRotate.performed -= instance.OnDisableRotate;
            @DisableRotate.canceled -= instance.OnDisableRotate;
        }

        public void RemoveCallbacks(IPlayerRotateActions instance)
        {
            if (m_Wrapper.m_PlayerRotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerRotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerRotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerRotateActions @PlayerRotate => new PlayerRotateActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovementControls(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
    }
    public interface IPlayerCameraActions
    {
        void OnCameraControls(InputAction.CallbackContext context);
    }
    public interface IPlayerRotateActions
    {
        void OnSelectDirection(InputAction.CallbackContext context);
        void OnConfirmRotate(InputAction.CallbackContext context);
        void OnDisableRotate(InputAction.CallbackContext context);
    }
}
